#Intention create ATG component
intentions.create.component=Create ATG component
intentions.create.component.packageNotFound=Cannot determine package for the class
intentions.create.component.moduleNotFound=Cannot determine module or source root for given class
intentions.create.component.moduleNotAtg=Module ''{0}'' is not marked ATG module. ATG Facet for this module should be set up at first
intentions.create.component.moduleHasNoRoots=Module ''{0}'' has no config roots defined
intentions.create.component.exist=Component file already exist
intentions.create.component.error=Couldn't Create A Component

create.directory.command=Create directory
action.update.dependencies.parsingDynamoRoot.text=Parsing of Dynamo Root folder
action.update.dependencies.attach.text=Attaching of ATG Dependencies
action.update.dependencies.attach.text2=Updating of {0}
action.update.dependencies.removeConfigs.text=Removal Of Previously Attached ATG Configs
action.update.dependencies.removeClasses.text=Removal Of Previously Attached ATG Classes
action.update.dependencies.indexing.text=Indexing Of Changed Libraries

action.detect.roots.text=Detection of ATG roots
action.detect.roots.text2=Parsing {0} module contents

#ATG_HOME variable registrar
detection.atg.title=ATG OOTB modules detection
detection.atg.modules.not.set=Project doesn't include any modules with defined <i>atgModuleName</i> (in ATG Module Facet page), or any ATG modules at all
detection.atg.atgHome.notSet.text=Cannot resolve path variable 'ATG_HOME'<br> It's required for any processing of ATG OOTB modules
detection.atg.atgHome.wrong.text=Cannot access folder ''{0}'' defined as 'ATG_HOME' path variable<br> It's required for any processing of ATG OOTB modules
detection.atg.atgHome.manifestsAbsent=Cannot resolve manifests for modules by paths {0}\n\
Ensure that:\n\
 - 'ATG_HOME' path variable is set and faces on DYNAMO_ROOT folder, \n\
 - Proper names (Names of corresponding ATG modules inside DYNAMO_ROOT folder) are defined in ATG Facets for these modules\n\
 - ATG-Required manifest headers are defined correctly\n\
 - Manifests are already in place, especially if they are generated by some script.

#GUI in Setting page
gui.config.title=ATG Toolkit
gui.config.detection.title=ATG Framework Detection
gui.config.detection.configRoots.text=ATG configuration roots patterns
gui.config.detection.configRoots.hint=Patterns list for detection configuration roots, separated by commas. * and ? are allowed
gui.config.detection.configLayersRoots.text=ATG configuration layer roots patterns
gui.config.detection.configLayersRoots.hint=Patterns list for detection configuration layer roots, separated by commas. * and ? are allowed
gui.config.detection.removeRootsNonMatchedToPatterns.text=Unmark exist project's ATG roots, which doesn't match to patterns
gui.config.detection.removeRootsNonMatchedToPatterns.hint=If project contain any ATG roots, which paths doesn't match to patterns above, assignation them as root will be removed during update
gui.config.detection.removeFacetsIfModuleHasNoAtgRoots.text=Remove ATG module facet during update, if no more ATG roots exist in module
gui.config.detection.removeFacetsIfModuleHasNoAtgRoots.hint=If any module doesn't contain any marked ATG roots after the update, its mark as ATG module  (ATG Facet) will be removed at the update end
gui.config.detection.button.title=Detect and Update ATG roots for whole project
gui.config.detection.changedRoots.title=ATG Roots update
gui.config.detection.addedRoots.text=Marked as ATG roots: {0}
gui.config.detection.removedRoots.text=Unmarked ATG roots: {0}
gui.config.detection.noChangedRoots.text=No  ATG roots  were changed
gui.config.completion.title=Components properties completion
gui.config.completion.ignoredClasses.text=Classes patterns which should be ignored when obtaining setters
gui.config.completion.ignoredClasses.example=Example: atg.nucleus.*,myPackage.myClass
gui.config.dependencies.title=Dependencies Management  (based on ATG module names, and corresponding MANIFEST files Required headers)
gui.config.dependencies.attachConfigsOfAtgDependencies.text=Attach Configuration roots of dependent ATG modules to the project
gui.config.dependencies.attachClassPathOfAtgDependencies.text=Attach ClassPaths roots of dependent ATG modules to the project
gui.config.dependencies.attachClassPathOfAtgDependencies.hint=Be aware of possible duplications of dependencies if use this checkbox with other dependencies provider
gui.config.dependencies.button.title=Detect and Attach OOTB ATG dependencies
gui.config.goto.title=GoToComponents action
gui.config.goto.showOverridesOfComponentInGoTo.text=Show overridden configuration files for the component in GoToComponents action
gui.config.goto.showReferencesOnComponentInGoTo.text=Show references to the component in GoToComponents action
gui.config.goto.showReferencesOnComponentInGoTo.hint=Could slightly increase time of loading list for GoToComponents action
gui.help.text=Press F1 to open WIKI for this page

#GUI in Facet Settings page
gui.facet.title=ATG Module Parameters
gui.facet.hint=Modification of roots isn't allowed from the facet page in this version
gui.facet.hint2=Use MarkAs actions on folders for this purpose
gui.facet.atgModuleName.text=Atg Module Name
gui.facet.atgModuleName.hint=Same as this module has inside ATG_HOME folder. Ex: MyModule.Store
gui.facet.configRoots.title=Configuration Roots
gui.facet.configLayersRoots.title=Configuration Layers Roots
gui.facet.webRoots.title=Web Roots

#Mark Root As Actions
gui.markAs.configRoot.title=ATG Configuration Root
gui.markAs.configLayerRoot.title=ATG Configuration Layer Root
gui.markAs.webRoot.title=ATG Web Root
gui.unMarkAs.configRoot.title=Remove ATG Root mark

goto.component.from.class.text=ATG components
goto.component.from.class.description=Go to all components based on the ''{0}''
goto.component.from.component.text=Usages of ATG component
goto.component.from.component.description=Go to all components depending on this one
goto.component.notFound=No components found
goto.component.findUsages=Components for {0}
goto.component.chooserTitle.from.class.subject=<html><body>Choose Component for <b>{0}</b> ({1} found{2})</body></html>
goto.component.chooserTitle.from.component.subject=<html><body>Usages and Overrides for <b>{0}</b> ({1} found{2})</body></html>

#LineMarkerProvider
goto.component.layers.description=Other layers of ''{0}''

#Inspection
inspection.group.display.name=ATG Toolkit
inspection.dependenciesScope.title=Dependency Scope
inspection.dependenciesScope.text=Wider-scoped component  should not rely on a component with scope(s) {0}
inspection.classNotFound.title=Class not found
inspection.classNotFound.text=Cannot resolve class ''{0}''
inspection.availableSetter.title=Absent Setter
inspection.availableGetter.title=Absent Getter
inspection.notAvailableMethod.text=Cannot resolve method ''{0}'' for class ''{1}''
inspection.dependenciesTypes.title=Dependencies Type Check
inspection.dependenciesTypes.text=Incompatible types. Found: ''{0}'', required: ''{1}''
inspection.dependenciesAbsent.title=Absent Component
inspection.dependenciesAbsent.text=Cannot resolve component ''{0}''
inspection.trailingSlash.text=Trailing slashes

new.atg.file.action=Additional ATG File
new.atg.file.action.dialog.title=New Additional ATG File
new.atg.file.action.dialog.description=Creates new ATG file